"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,n,e){return n&&_defineProperties(t.prototype,n),e&&_defineProperties(t,e),Object.defineProperty(t,"prototype",{writable:!1}),t}!function(t,n){"object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(t="undefined"!=typeof globalThis?globalThis:t||self).Splide=n()}(void 0,function(){var p="(prefers-reduced-motion: reduce)",R=4,nt=5,n={CREATED:1,MOUNTED:2,IDLE:3,MOVING:R,SCROLLING:nt,DRAGGING:6,DESTROYED:7};function L(t){t.length=0}function o(t,n,e){return Array.prototype.slice.call(t,n,e)}function D(t){return t.bind.apply(t,[null].concat(o(arguments,1)))}function et(){}var g=setTimeout;function h(t){requestAnimationFrame(t)}function e(t,n){return _typeof(n)===t}function it(t){return!u(t)&&e("object",t)}var r=Array.isArray,_=D(e,"function"),M=D(e,"string"),ot=D(e,"undefined");function u(t){return null===t}function y(t){return t instanceof HTMLElement}function v(t){return r(t)?t:[t]}function m(t,n){v(t).forEach(n)}function b(t,n){return-1<t.indexOf(n)}function P(t,n){return t.push.apply(t,v(n)),t}function A(n,t,e){n&&m(t,function(t){t&&n.classList[e?"add":"remove"](t)})}function z(t,n){A(t,M(n)?n.split(" "):n,!0)}function C(t,n){m(n,t.appendChild.bind(t))}function k(t,e){m(t,function(t){var n=(e||t).parentNode;n&&n.insertBefore(t,e)})}function rt(t,n){return y(t)&&(t.msMatchesSelector||t.matches).call(t,n)}function ut(t,n){return t=t?o(t.children):[],n?t.filter(function(t){return rt(t,n)}):t}function st(t,n){return n?ut(t,n)[0]:t.firstElementChild}var ct=Object.keys;function w(t,n,e){if(t)for(var i=ct(t),i=e?i.reverse():i,o=0;o<i.length;o++){var r=i[o];if("__proto__"!==r&&!1===n(t[r],r))break}}function at(i){return o(arguments,1).forEach(function(e){w(e,function(t,n){i[n]=e[n]})}),i}function d(e){return o(arguments,1).forEach(function(t){w(t,function(t,n){r(t)?e[n]=t.slice():it(t)?e[n]=d({},it(e[n])?e[n]:{},t):e[n]=t})}),e}function lt(n,t){v(t||ct(n)).forEach(function(t){delete n[t]})}function N(t,e){m(t,function(n){m(e,function(t){n&&n.removeAttribute(t)})})}function T(e,n,i){it(n)?w(n,function(t,n){T(e,n,t)}):m(e,function(t){u(i)||""===i?N(t,n):t.setAttribute(n,String(i))})}function O(t,n,e){return t=document.createElement(t),n&&(M(n)?z:T)(t,n),e&&C(e,t),t}function I(t,n,e){if(ot(e))return getComputedStyle(t)[n];u(e)||(t.style[n]=""+e)}function ft(t,n){I(t,"display",n)}function dt(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function F(t,n){return t.getAttribute(n)}function pt(t,n){return t&&t.classList.contains(n)}function j(t){return t.getBoundingClientRect()}function W(t){m(t,function(t){t&&t.parentNode&&t.parentNode.removeChild(t)})}function ht(t){return st((new DOMParser).parseFromString(t,"text/html").body)}function G(t,n){t.preventDefault(),n&&(t.stopPropagation(),t.stopImmediatePropagation())}function gt(t,n){return t&&t.querySelector(n)}function vt(t,n){return n?o(t.querySelectorAll(n)):[]}function X(t,n){A(t,n,!1)}function mt(t){return t.timeStamp}function S(t){return M(t)?t:t?t+"px":""}var E="splide",i="data-"+E;function yt(t,n){if(!t)throw new Error("["+E+"] "+(n||""))}var B=Math.min,bt=Math.max,wt=Math.floor,Et=Math.ceil,H=Math.abs;function St(t,n,e){return H(t-n)<e}function xt(t,n,e,i){var o=B(n,e),e=bt(n,e);return i?o<t&&t<e:o<=t&&t<=e}function _t(t,n,e){var i=B(n,e),e=bt(n,e);return B(bt(i,t),e)}function Pt(t){return(0<t)-(t<0)}function Ct(n,t){return m(t,function(t){n=n.replace("%s",""+t)}),n}function kt(t){return t<10?"0"+t:""+t}var Lt={};function At(){var s=[];function e(t,e,i){m(t,function(n){n&&m(e,function(t){t.split(" ").forEach(function(t){t=t.split("."),i(n,t[0],t[1])})})})}return{bind:function(t,n,r,u){e(t,n,function(t,n,e){var i="addEventListener"in t,o=i?t.removeEventListener.bind(t,n,r,u):t.removeListener.bind(t,r);i?t.addEventListener(n,r,u):t.addListener(r),s.push([t,n,e,r,o])})},unbind:function(t,n,o){e(t,n,function(n,e,i){s=s.filter(function(t){return!!(t[0]!==n||t[1]!==e||t[2]!==i||o&&t[3]!==o)||(t[4](),!1)})})},dispatch:function(t,n,e){var i;return"function"==typeof CustomEvent?i=new CustomEvent(n,{bubbles:!0,detail:e}):(i=document.createEvent("CustomEvent")).initCustomEvent(n,!0,!1,e),t.dispatchEvent(i),i},destroy:function(){s.forEach(function(t){t[4]()}),L(s)}}}var Y="mounted",q="move",Dt="moved",Mt="shifted",zt="click",Nt="active",Tt="inactive",Ot="visible",It="hidden",Ft="slide:keydown",U="refresh",K="updated",x="resize",jt="resized",Rt="scroll",J="scrolled",s="destroy",Wt="navigation:mounted",Gt="autoplay:play",Xt="autoplay:pause",Bt="lazyload:loaded";function Q(t){var e=t?t.event.bus:document.createDocumentFragment(),i=At();return t&&t.event.on(s,i.destroy),at(i,{bus:e,on:function(t,n){i.bind(e,v(t).join(" "),function(t){n.apply(n,r(t.detail)?t.detail:[])})},off:D(i.unbind,e),emit:function(t){i.dispatch(e,t,o(arguments,1))}})}function Ht(n,t,e,i){var o,r,u=Date.now,s=0,c=!0,a=0;function l(){if(!c){if(s=n?B((u()-o)/n,1):1,e&&e(s),1<=s&&(t(),o=u(),i&&++a>=i))return f();h(l)}}function f(){c=!0}function d(){r&&cancelAnimationFrame(r),c=!(r=s=0)}return{start:function(t){t||d(),o=u()-(t?s*n:0),c=!1,h(l)},rewind:function(){o=u(),s=0,e&&e(s)},pause:f,cancel:d,set:function(t){n=t},isPaused:function(){return c}}}var t="Arrow",Yt=t+"Left",qt=t+"Right",c=t+"Up",a=t+"Down",Ut="ttb",l={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[c,qt],ArrowRight:[a,Yt]},V="role",Z="tabindex",Kt=(t="aria-")+"controls",Jt=t+"current",Qt=t+"selected",$=t+"label",Vt=t+"labelledby",Zt=t+"hidden",$t=t+"orientation",tn=t+"roledescription",f=t+"live",nn=t+"relevant",en=[V,Z,"disabled",Kt,Jt,$,Vt,Zt,$t,tn],on=E,rn=E+"__track",un=E+"__list",sn=E+"__slide",cn=sn+"--clone",an=sn+"__container",ln=E+"__arrows",fn=E+"__arrow",dn=fn+"--prev",pn=fn+"--next",hn=E+"__pagination",gn=hn+"__page",vn=E+"__progress__bar",mn=E+"__toggle",yn=E+"__sr",tt="is-active",bn="is-prev",wn="is-next",En="is-visible",Sn="is-loading",xn="is-focus-in",_n=[tt,En,bn,wn,Sn,xn],Pn="touchstart mousedown",Cn="touchmove mousemove",kn="touchend touchcancel mouseup",Ln="slide",An="loop",Dn="fade";function Mn(o,i,n,r){var u,t=Q(o),e=t.on,s=t.emit,c=t.bind,a=o.Components,l=o.root,f=o.options,d=f.isNavigation,p=f.updateOnMove,h=f.i18n,g=f.pagination,v=f.slideFocus,m=a.Direction.resolve,y=F(r,"style"),b=F(r,$),w=-1<n,E=st(r,"."+an),S=vt(r,f.focusableNodes||"");function x(){var t=o.splides.map(function(t){return(t=t.splide.Components.Slides.getAt(i))?t.slide.id:""}).join(" ");T(r,$,Ct(h.slideX,(w?n:i)+1)),T(r,Kt,t),T(r,V,v?"button":""),v&&N(r,tn)}function _(){u||P()}function P(){var t,n,e;u||(t=o.index,(n=C())!==pt(r,tt)&&(A(r,tt,n),T(r,Jt,d&&n||""),s(n?Nt:Tt,k)),n=function(){if(o.is(Dn))return C();var t=j(a.Elements.track),n=j(r),e=m("left"),i=m("right");return wt(t[e])<=Et(n[e])&&wt(n[i])<=Et(t[i])}(),e=!n&&(!C()||w),o.state.is([R,nt])||T(r,Zt,e||""),T(S,Z,e?-1:""),v&&T(r,Z,e?-1:0),n!==pt(r,En)&&(A(r,En,n),s(n?Ot:It,k)),n||document.activeElement!==r||(n=a.Slides.getAt(o.index))&&dt(n.slide),A(r,bn,i===t-1),A(r,wn,i===t+1))}function C(){var t=o.index;return t===i||f.cloneStatus&&t===n}var k={index:i,slideIndex:n,slide:r,container:E,isClone:w,mount:function(){w||(r.id=l.id+"-slide"+kt(i+1),T(r,V,g?"tabpanel":"group"),T(r,tn,h.slide),T(r,$,b||Ct(h.slideLabel,[i+1,o.length]))),c(r,"click",D(s,zt,k)),c(r,"keydown",D(s,Ft,k)),e([Dt,Mt,J],P),e(Wt,x),p&&e(q,_)},destroy:function(){u=!0,t.destroy(),X(r,_n),N(r,en),T(r,"style",y),T(r,$,b||"")},update:P,style:function(t,n,e){I(e&&E||r,t,n)},isWithin:function(t,n){return t=H(t-i),(t=w||!f.rewind&&!o.is(An)?t:B(t,o.length-t))<=n}};return k}var zn=i+"-interval",Nn={passive:!1,capture:!0},Tn={Spacebar:" ",Right:qt,Left:Yt,Up:c,Down:a};function On(t){return t=M(t)?t:t.key,Tn[t]||t}var In="keydown",Fn=i+"-lazy",jn=Fn+"-srcset",Rn="["+Fn+"], ["+jn+"]",Wn=[" ","Enter"],Gn=Object.freeze({__proto__:null,Media:function(i,t,o){var r=i.state,n=o.breakpoints||{},u=o.reducedMotion||{},e=At(),s=[];function c(t){t&&e.destroy()}function a(t,n){n=matchMedia(n),e.bind(n,"change",l),s.push([t,n])}function l(){var t=r.is(7),n=o.direction,e=s.reduce(function(t,n){return d(t,n[1].matches?n[0]:{})},{});lt(o),f(e),o.destroy?i.destroy("completely"===o.destroy):t?(c(!0),i.mount()):n!==o.direction&&i.refresh()}function f(t,n){d(o,t),n&&d(Object.getPrototypeOf(o),t),r.is(1)||i.emit(K,o)}return{setup:function(){var e="min"===o.mediaQuery;ct(n).sort(function(t,n){return e?+t-+n:+n-+t}).forEach(function(t){a(n[t],"("+(e?"min":"max")+"-width:"+t+"px)")}),a(u,p),l()},destroy:c,reduce:function(t){matchMedia(p).matches&&(t?d(o,u):lt(o,ct(u)))},set:f}},Direction:function(t,n,o){return{resolve:function(t,n,e){var i="rtl"!==(e=e||o.direction)||n?e===Ut?0:-1:1;return l[t]&&l[t][i]||t.replace(/width|left|right/i,function(t,n){return t=l[t.toLowerCase()][i]||t,0<n?t.charAt(0).toUpperCase()+t.slice(1):t})},orient:function(t){return t*("rtl"===o.direction?1:-1)}}},Elements:function(t,n,e){var i,o,r,u=Q(t),s=u.on,c=u.bind,a=t.root,l=e.i18n,f={},d=[],p=[],h=[];function g(){var t,n;i=y("."+rn),o=st(i,"."+un),yt(i&&o,"A track/list element is missing."),P(d,ut(o,"."+sn+":not(."+cn+")")),w({arrows:ln,pagination:hn,prev:dn,next:pn,bar:vn,toggle:mn},function(t,n){f[n]=y("."+t)}),at(f,{root:a,track:i,list:o,slides:d}),t=a.id||""+E+kt(Lt[E]=(Lt[E]||0)+1),n=e.role,a.id=t,i.id=i.id||t+"-track",o.id=o.id||t+"-list",!F(a,V)&&"SECTION"!==a.tagName&&n&&T(a,V,n),T(a,tn,l.carousel),T(o,V,"presentation"),m()}function v(t){var n=en.concat("style");L(d),X(a,p),X(i,h),N([i,o],n),N(a,t?n:["style",tn])}function m(){X(a,p),X(i,h),p=b(on),h=b(rn),z(a,p),z(i,h),T(a,$,e.label),T(a,Vt,e.labelledby)}function y(t){return(t=gt(a,t))&&function(t,n){if(_(t.closest))return t.closest(n);for(var e=t;e&&1===e.nodeType&&!rt(e,n);)e=e.parentElement;return e}(t,"."+on)===a?t:void 0}function b(t){return[t+"--"+e.type,t+"--"+e.direction,e.drag&&t+"--draggable",e.isNavigation&&t+"--nav",t===on&&tt]}return at(f,{setup:g,mount:function(){s(U,v),s(U,g),s(K,m),c(document,Pn+" keydown",function(t){r="keydown"===t.type},{capture:!0}),c(a,"focusin",function(){A(a,xn,!!r)})},destroy:v})},Slides:function(i,o,r){var t=Q(i),n=t.on,u=t.emit,s=t.bind,c=(t=o.Elements).slides,a=t.list,l=[];function e(){c.forEach(function(t,n){d(t,n,-1)})}function f(){h(function(t){t.destroy()}),L(l)}function d(t,n,e){(t=Mn(i,n,e,t)).mount(),l.push(t)}function p(t){return t?g(function(t){return!t.isClone}):l}function h(t,n){p(n).forEach(t)}function g(n){return l.filter(_(n)?n:function(t){return M(n)?rt(t.slide,n):b(v(n),t.index)})}return{mount:function(){e(),n(U,f),n(U,e),n([Y,U],function(){l.sort(function(t,n){return t.index-n.index})})},destroy:f,update:function(){h(function(t){t.update()})},register:d,get:p,getIn:function(t){var n=o.Controller,e=n.toIndex(t),i=n.hasFocus()?1:r.perPage;return g(function(t){return xt(t.index,e,e+i-1)})},getAt:function(t){return g(t)[0]},add:function(t,o){m(t,function(t){var n,e,i;y(t=M(t)?ht(t):t)&&((n=c[o])?k(t,n):C(a,t),z(t,r.classes.slide),e=D(u,x),t=vt(t,"img"),(i=t.length)?t.forEach(function(t){s(t,"load error",function(){--i||e()})}):e())}),u(U)},remove:function(t){W(g(t).map(function(t){return t.slide})),u(U)},forEach:h,filter:g,style:function(n,e,i){h(function(t){t.style(n,e,i)})},getLength:function(t){return(t?c:l).length},isEnough:function(){return l.length>r.perPage}}},Layout:function(t,n,e){var i,o,r=(c=Q(t)).on,u=c.bind,s=c.emit,c=n.Slides,a=n.Direction.resolve,l=(n=n.Elements).root,f=n.track,d=n.list,p=c.getAt,h=c.style;function g(){o=null,i=e.direction===Ut,I(l,"maxWidth",S(e.width)),I(f,a("paddingLeft"),m(!1)),I(f,a("paddingRight"),m(!0)),v()}function v(){var t,n=j(l);o&&o.width===n.width&&o.height===n.height||(I(f,"height",(t="",i&&(yt(t=y(),"height or heightRatio is missing."),t="calc("+t+" - "+m(!1)+" - "+m(!0)+")"),t)),h(a("marginRight"),S(e.gap)),h("width",e.autoWidth?null:S(e.fixedWidth)||(i?"":b())),h("height",S(e.fixedHeight)||(i?e.autoHeight?null:b():y()),!0),o=n,s(jt))}function m(t){var n=e.padding,t=a(t?"right":"left");return n&&S(n[t]||(it(n)?0:n))||"0px"}function y(){return S(e.height||j(d).width*e.heightRatio)}function b(){var t=S(e.gap);return"calc((100%"+(t&&" + "+t)+")/"+(e.perPage||1)+(t&&" - "+t)+")"}function w(t,n){var e=p(t);return e?(t=j(e.slide)[a("right")],e=j(d)[a("left")],H(t-e)+(n?0:E())):0}function E(){var t=p(0);return t&&parseFloat(I(t.slide,a("marginRight")))||0}return{mount:function(){var t,n;g(),u(window,"resize load",(t=D(s,x),function(){n||(n=Ht(0,function(){t(),n=null},null,1)).start()})),r([K,U],g),r(x,v)},listSize:function(){return j(d)[a("width")]},slideSize:function(t,n){return(t=p(t||0))?j(t.slide)[a("width")]+(n?0:E()):0},sliderSize:function(){return w(t.length-1,!0)-w(-1,!0)},totalSize:w,getPadding:function(t){return parseFloat(I(f,a("padding"+(t?"Right":"Left"))))||0}}},Clones:function(c,e,a){var t,n=Q(c),i=n.on,o=n.emit,l=e.Elements,f=e.Slides,r=e.Direction.resolve,d=[];function u(){if(t=h()){var r=t,u=f.get().slice(),s=u.length;if(s){for(;u.length<r;)P(u,u);P(u.slice(-r),u.slice(0,r)).forEach(function(t,n){var e,i=n<r,o=(e=t.slide,o=n,z(e=e.cloneNode(!0),a.classes.clone),e.id=c.root.id+"-clone"+kt(o+1),e);i?k(o,u[0].slide):C(l.list,o),P(d,o),f.register(o,n-r+(i?0:s),t.index)})}o(x)}}function s(){W(d),L(d)}function p(){t<h()&&o(U)}function h(){var t,n=a.clones;return n=c.is(An)?n||(t=a[r("fixedWidth")]&&e.Layout.slideSize(0))&&Et(j(l.track)[r("width")]/t)||a[r("autoWidth")]&&c.length||2*a.perPage:0}return{mount:function(){u(),i(U,s),i(U,u),i([K,x],p)},destroy:s}},Move:function(r,s,i){var c,t=Q(r),n=t.on,a=t.emit,l=r.state.set,o=(t=s.Layout).slideSize,e=t.getPadding,u=t.totalSize,f=t.listSize,d=t.sliderSize,p=(t=s.Direction).resolve,h=t.orient,g=(t=s.Elements).list,v=t.track;function m(){s.Controller.isBusy()||(s.Scroll.cancel(),y(r.index),s.Slides.update())}function y(t){b(S(t,!0))}function b(t,n){var e,i,o;r.is(Dn)||(n=n?t:(e=t,r.is(An)&&(o=h(e-x()),i=P(!1,e)&&o<0,o=P(!0,e)&&0<o,(i||o)&&(e=w(e,o))),e),I(g,"transform","translate"+p("X")+"("+n+"px)"),t!==n&&a(Mt))}function w(t,n){var e=t-_(n),i=d();return t-h(i*(Et(H(e)/i)||1))*(n?1:-1)}function E(){b(x()),c.cancel()}function S(t,n){var e=h(u(t-1)-(e=t,"center"===(t=i.focus)?(f()-o(e,!0))/2:+t*o(e)||0));return n?(t=e,t=i.trimSpace&&r.is(Ln)?_t(t,0,h(d()-f())):t):e}function x(){var t=p("left");return j(g)[t]-j(v)[t]+h(e(!1))}function _(t){return S(t?s.Controller.getEnd():0,!!i.trimSpace)}function P(t,n){n=ot(n)?x():n;var e=!0!==t&&h(n)<h(_(!1)),n=!1!==t&&h(n)>h(_(!0));return e||n}return{mount:function(){c=s.Transition,n([Y,jt,K,U],m)},move:function(t,n,e,i){var o,r,u=x();t!==n&&(o=n<t,r=h(w(x(),o)),o?0<=r:r<=g["scroll"+p("Width")]-j(v)[p("width")])&&(E(),b(w(u,n<t),!0)),l(R),a(q,n,e,t),c.start(n,function(){l(3),a(Dt,n,e,t),i&&i()})},jump:y,translate:b,shift:w,cancel:E,toIndex:function(t){for(var n=s.Slides.get(),e=0,i=1/0,o=0;o<n.length;o++){var r=n[o].index,u=H(S(r,!0)-t);if(!(u<=i))break;i=u,e=r}return e},toPosition:S,getPosition:x,getLimit:_,exceededLimit:P,reposition:m}},Controller:function(r,o,u){var s,i,c,t=Q(r).on,a=o.Move,l=a.getPosition,f=a.getLimit,d=a.toPosition,n=o.Slides,p=n.isEnough,e=n.getLength,h=r.is(An),g=r.is(Ln),v=D(E,!1),m=D(E,!0),y=u.start||0,b=y;function w(){s=e(!0),i=u.perMove,c=u.perPage;var t=_t(y,0,s-1);t!==y&&(y=t,a.reposition())}function E(t,n){var e=i||(L()?1:c);return-1===(e=S(y+e*(t?-1:1),y,!(i||L())))&&g&&!St(l(),f(!t),1)?t?0:_():n?e:x(e)}function S(t,n,e){var i,o;return p()?(i=_(),(o=function(t){if(g&&"move"===u.trimSpace&&t!==y)for(var n=l();n===d(t,!0)&&xt(t,0,r.length-1,!u.rewind);)t<y?--t:++t;return t}(t))!==t&&(n=t,t=o,e=!1),t<0||i<t?t=xt(0,t,n,!0)||xt(i,n,t,!0)?P(C(t)):h?e?t<0?-(s%c||c):s:t:u.rewind?t<0?i:0:-1:e&&t!==n&&(t=P(C(n)+(t<n?-1:1)))):t=-1,t}function x(t){return h?(t+s)%s||0:t}function _(){return bt(s-(L()||h&&i?1:c),0)}function P(t){return _t(L()?t:c*t,0,_())}function C(t){return L()?t:wt((t>=_()?s-1:t)/c)}function k(t){t!==y&&(b=y,y=t)}function L(){return!ot(u.focus)||u.isNavigation}function A(){return r.state.is([R,nt])&&!!u.waitForTransition}return{mount:function(){w(),t([K,U],w)},go:function(t,n,e){var i,o,r,u;A()||-1<(t=x((u=y,M(i=t)?(o=(r=i.match(/([+\-<>])(\d+)?/)||[])[1],r=r[2],"+"===o||"-"===o?u=S(y+ +(""+o+(+r||1)),y):">"===o?u=r?P(+r):v(!0):"<"===o&&(u=m(!0))):u=h?i:_t(i,0,_()),r=u)))&&(n||t!==y)&&(k(t),a.move(r,t,b,e))},scroll:function(t,n,e,i){o.Scroll.scroll(t,n,e,function(){k(x(a.toIndex(a.getPosition()))),i&&i()})},getNext:v,getPrev:m,getAdjacent:E,getEnd:_,setIndex:k,getIndex:function(t){return t?b:y},toIndex:P,toPage:C,toDest:function(t){return t=a.toIndex(t),g?_t(t,0,_()):t},hasFocus:L,isBusy:A}},Arrows:function(o,t,n){var e,i,r=Q(o),u=r.on,s=r.bind,c=r.emit,a=n.classes,l=n.i18n,f=t.Elements,d=t.Controller,p=f.arrows,h=f.track,g=p,v=f.prev,m=f.next,y={};function b(){var t;!(t=n.arrows)||v&&m||(g=p||O("div",a.arrows),v=x(!0),m=x(!1),e=!0,C(g,[v,m]),p||k(g,h)),v&&m&&(at(y,{prev:v,next:m}),ft(g,t?"":"none"),z(g,i=ln+"--"+n.direction),t&&(u([Dt,U,J],_),s(m,"click",D(S,">")),s(v,"click",D(S,"<")),_(),T([v,m],Kt,h.id),c("arrows:mounted",v,m))),u(K,w)}function w(){E(),b()}function E(){r.destroy(),X(g,i),e?(W(p?[v,m]:g),v=m=null):N([v,m],en)}function S(t){d.go(t,!0)}function x(t){return ht('<button class="'+a.arrow+" "+(t?a.prev:a.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function _(){var t=o.index,n=d.getPrev(),e=d.getNext(),i=-1<n&&t<n?l.last:l.prev,t=-1<e&&e<t?l.first:l.next;v.disabled=n<0,m.disabled=e<0,T(v,$,i),T(m,$,t),c("arrows:updated",v,m,n,e)}return{arrows:y,mount:b,destroy:E}},Autoplay:function(t,n,e){var i,o,r=Q(t),u=r.on,s=r.bind,c=r.emit,a=Ht(e.interval,t.go.bind(t,">"),function(t){var n=f.bar;n&&I(n,"width",100*t+"%"),c("autoplay:playing",t)}),l=a.isPaused,f=n.Elements,d=(t=n.Elements).root,p=t.toggle,h=e.autoplay,g="pause"===h;function v(){l()&&n.Slides.isEnough()&&(a.start(!e.resetProgress),o=i=g=!1,b(),c(Gt))}function m(t){g=!!(t=void 0===t||t),b(),l()||(a.pause(),c(Xt))}function y(){g||(i||o?m(!1):v())}function b(){p&&(A(p,tt,!g),T(p,$,e.i18n[g?"play":"pause"]))}function w(t){t=n.Slides.getAt(t),a.set(t&&+F(t.slide,zn)||e.interval)}return{mount:function(){h&&(e.pauseOnHover&&s(d,"mouseenter mouseleave",function(t){i="mouseenter"===t.type,y()}),e.pauseOnFocus&&s(d,"focusin focusout",function(t){o="focusin"===t.type,y()}),p&&s(p,"click",function(){g?v():m(!0)}),u([q,Rt,U],a.rewind),u(q,w),p&&T(p,Kt,f.track.id),g||v(),b())},destroy:a.cancel,play:v,pause:m,isPaused:l}},Cover:function(t,n,e){var i=Q(t).on;function o(e){n.Slides.forEach(function(t){var n=st(t.container||t.slide,"img");n&&n.src&&r(e,n,t)})}function r(t,n,e){e.style("background",t?'center/cover no-repeat url("'+n.src+'")':"",!0),ft(n,t?"none":"")}return{mount:function(){e.cover&&(i(Bt,D(r,!0)),i([Y,K,U],D(o,!0)))},destroy:D(o,!1)}},Scroll:function(r,s,u){var c,a,t=Q(r),n=t.on,l=t.emit,f=r.state.set,d=s.Move,p=d.getPosition,h=d.getLimit,g=d.exceededLimit,v=d.translate,m=1;function y(t,n,e,i,o){var r=p(),u=(E(),e&&(e=s.Layout.sliderSize(),u=Pt(t)*e*wt(H(t)/e)||0,t=d.toPosition(s.Controller.toDest(t%e))+u),St(r,t,1));m=1,n=u?0:n||bt(H(t-r)/1.5,800),a=i,c=Ht(n,b,D(w,r,t,o),1),f(nt),l(Rt),c.start()}function b(){f(3),a&&a(),l(J)}function w(t,n,e,i){var o=p(),t=(t+(n-t)*(t=i,(i=u.easingFunc)?i(t):1-Math.pow(1-t,4))-o)*m;v(o+t),r.is(Ln)&&!e&&g()&&(m*=.6,H(t)<10&&y(h(g(!0)),600,!1,void 0,!0))}function E(){c&&c.cancel()}function e(){c&&!c.isPaused()&&(E(),b())}return{mount:function(){n(q,E),n([K,U],e)},destroy:E,scroll:y,cancel:e}},Drag:function(r,o,u){var s,n,c,a,l,f,d,p,t=Q(r),e=t.on,h=t.emit,g=t.bind,v=t.unbind,m=r.state,y=o.Move,b=o.Scroll,w=o.Controller,E=o.Elements.track,S=o.Media.reduce,i=(t=o.Direction).resolve,x=t.orient,_=y.getPosition,P=y.exceededLimit,C=!1;function I(){var t=u.drag;O(!t),a="free"===t}function F(t){var n,e,i;f=!1,d||(n=T(t),e=t.target,i=u.noDrag,rt(e,"."+gn+", ."+fn)||i&&rt(e,i)||!n&&t.button||(w.isBusy()?G(t,!0):(p=n?E:window,l=m.is([R,nt]),c=null,g(p,Cn,k,Nn),g(p,kn,L,Nn),y.cancel(),b.cancel(),A(t))))}function k(t){var n,e,i,o;m.is(6)||(m.set(6),h("drag")),t.cancelable&&(l?(y.translate(s+D(t)/(C&&r.is(Ln)?5:1)),e=200<M(t),i=C!==(C=P()),(e||i)&&A(t),f=!0,h("dragging"),G(t)):H(D(o=t))>H(D(o,!0))&&(n=t,o=(i=it(e=u.dragMinThreshold))&&e.mouse||0,e=(i?e.touch:+e)||10,l=H(D(n))>(T(n)?e:o),G(t)))}function L(t){var n,e,i;m.is(6)&&(m.set(3),h("dragged")),l&&(e=function(t){if(r.is(An)||!C){var n=M(t);if(n&&n<200)return D(t)/n}return 0}(t),i=e,i=_()+Pt(i)*B(H(i)*(u.flickPower||600),a?1/0:o.Layout.listSize()*(u.flickMaxPages||1)),n=u.rewind&&u.rewindByDrag,S(!1),a?w.scroll(i,0,u.snap):r.is(Dn)?w.go(x(Pt(e))<0?n?"<":"-":n?">":"+"):r.is(Ln)&&C&&n?w.go(P(!0)?">":"<"):w.go(w.toDest(i),!0),S(!0),G(t)),v(p,Cn,k),v(p,kn,L),l=!1}function j(t){!d&&f&&G(t,!0)}function A(t){c=n,n=t,s=_()}function D(t,n){return N(t,n)-N(z(t),n)}function M(t){return mt(t)-mt(z(t))}function z(t){return n===t&&c||n}function N(t,n){return(T(t)?t.changedTouches[0]:t)["page"+i(n?"Y":"X")]}function T(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function O(t){d=t}return{mount:function(){g(E,Cn,et,Nn),g(E,kn,et,Nn),g(E,Pn,F,Nn),g(E,"click",j,{capture:!0}),g(E,"dragstart",G),e([Y,K],I)},disable:O,isDragging:function(){return l}}},Keyboard:function(n,t,e){var i,o,r=Q(n),u=r.on,s=r.bind,c=r.unbind,a=n.root,l=t.Direction.resolve;function f(){var t=e.keyboard;t&&(i="global"===t?window:a,s(i,In,h))}function d(){c(i,In)}function p(){var t=o;o=!0,g(function(){o=t})}function h(t){o||((t=On(t))===l(Yt)?n.go("<"):t===l(qt)&&n.go(">"))}return{mount:function(){f(),u(K,d),u(K,f),u(q,p)},destroy:d,disable:function(t){o=t}}},LazyLoad:function(e,t,o){var n=Q(e),i=n.on,r=n.off,u=n.bind,s=n.emit,c="sequential"===o.lazyLoad,a=[Y,U,Dt,J],l=[];function f(){L(l),t.Slides.forEach(function(i){vt(i.slide,Rn).forEach(function(t){var n=F(t,Fn),e=F(t,jn);n===t.src&&e===t.srcset||(n=o.classes.spinner,e=st(e=t.parentElement,"."+n)||O("span",n,e),l.push([t,i,e]),t.src||ft(t,"none"))})}),c&&g()}function d(){(l=l.filter(function(t){var n=o.perPage*((o.preloadPages||1)+1)-1;return!t[1].isWithin(e.index,n)||p(t)})).length||r(a)}function p(t){var n=t[0];z(t[1].slide,Sn),u(n,"load error",D(h,t)),T(n,"src",F(n,Fn)),T(n,"srcset",F(n,jn)),N(n,Fn),N(n,jn)}function h(t,n){var e=t[0],i=t[1];X(i.slide,Sn),"error"!==n.type&&(W(t[2]),ft(e,""),s(Bt,e,i),s(x)),c&&g()}function g(){l.length&&p(l.shift())}return{mount:function(){o.lazyLoad&&(f(),i(U,f),c||i(a,d))},destroy:D(L,l)}},Pagination:function(f,t,d){var p,h,n=Q(f),g=n.on,v=n.emit,m=n.bind,y=t.Slides,b=t.Elements,e=t.Controller,w=e.hasFocus,i=e.getIndex,u=e.go,s=t.Direction.resolve,E=[];function S(){p&&(W(b.pagination?o(p.children):p),X(p,h),L(E),p=null),n.destroy()}function x(t){u(">"+t,!0)}function _(t,n){var e=E.length,i=On(n),o=P(),r=-1;i===s(qt,!1,o)?r=++t%e:i===s(Yt,!1,o)?r=(--t+e)%e:"Home"===i?r=0:"End"===i&&(r=e-1),(e=E[r])&&(dt(e.button),u(">"+r),G(n,!0))}function P(){return d.paginationDirection||d.direction}function C(t){return E[e.toPage(t)]}function k(){var t,n=C(i(!0)),e=C(i());n&&(X(t=n.button,tt),N(t,Qt),T(t,Z,-1)),e&&(z(t=e.button,tt),T(t,Qt,!0),T(t,Z,"")),v("pagination:updated",{list:p,items:E},n,e)}return{items:E,mount:function t(){if(S(),g([K,U],t),d.pagination&&y.isEnough()){g([q,Rt,J],k);var n=f.length,e=d.classes,i=d.i18n,o=d.perPage,r=w()?n:Et(n/o);z(p=b.pagination||O("ul",e.pagination,b.track.parentElement),h=hn+"--"+P()),T(p,V,"tablist"),T(p,$,i.select),T(p,$t,P()===Ut?"vertical":"");for(var u=0;u<r;u++){var s=O("li",null,p),c=O("button",{class:e.page,type:"button"},s),a=y.getIn(u).map(function(t){return t.slide.id}),l=!w()&&1<o?i.pageX:i.slideX;m(c,"click",D(x,u)),d.paginationKeyboard&&m(c,"keydown",D(_,u)),T(s,V,"presentation"),T(c,V,"tab"),T(c,Kt,a.join(" ")),T(c,$,Ct(l,u+1)),T(c,Z,-1),E.push({li:s,button:c,page:u})}k(),v("pagination:mounted",{list:p,items:E},C(f.index))}},destroy:S,getAt:C,update:k}},Sync:function(e,t,n){var i=n.isNavigation,o=n.slideFocus,r=[];function u(){var t,n;e.splides.forEach(function(t){t.isParent||(c(e,t.splide),c(t.splide,e))}),i&&((n=(t=Q(e)).on)(zt,l),n(Ft,f),n([Y,K],a),r.push(t),t.emit(Wt,e.splides))}function s(){r.forEach(function(t){t.destroy()}),L(r)}function c(t,i){(t=Q(t)).on(q,function(t,n,e){i.go(i.is(An)?e:t)}),r.push(t)}function a(){T(t.Elements.list,$t,n.direction===Ut?"vertical":"")}function l(t){e.go(t.index)}function f(t,n){b(Wn,On(n))&&(l(t),G(n))}return{setup:function(){e.options={slideFocus:ot(o)?i:o}},mount:u,destroy:s,remount:function(){s(),u()}}},Wheel:function(u,s,c){var t=Q(u).bind,a=0;function n(t){var n,e,i,o,r;t.cancelable&&(r=(n=t.deltaY)<0,e=mt(t),i=c.wheelMinThreshold||0,o=c.wheelSleep||0,H(n)>i&&o<e-a&&(u.go(r?"<":">"),a=e),c.releaseWheel&&!u.state.is(R)&&-1===s.Controller.getAdjacent(r)||G(t))}return{mount:function(){c.wheel&&t(s.Elements.track,"wheel",n,Nn)}}},Live:function(t,n,e){var i=Q(t).on,o=n.Elements.track,r=e.live&&!e.isNavigation,u=O("span",yn);function s(t){r&&T(o,f,t?"off":"polite")}return{mount:function(){r&&(s(!n.Autoplay.isPaused()),T(o,nn,"additions"),u.textContent="…",i(Gt,D(s,!0)),i(Xt,D(s,!1)),i([Dt,J],D(C,o,u)))},disable:s,destroy:function(){N(o,[f,nn]),W(u)}}}}),Xn={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:{slide:sn,clone:cn,arrows:ln,arrow:fn,prev:dn,next:pn,pagination:hn,page:gn,spinner:E+"__spinner"},i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Bn(t,i,n){var e=Q(t).on;return{mount:function(){e([Y,U],function(){g(function(){i.Slides.style("transition","opacity "+n.speed+"ms "+n.easing)})})},start:function(t,n){var e=i.Elements.track;I(e,"height",S(j(e).height)),g(function(){n(),I(e,"height","")})},cancel:et}}function Hn(r,t,u){var s,n=Q(r).bind,c=t.Move,a=t.Controller,l=t.Scroll,e=t.Elements.list,f=D(I,e,"transition");function i(){f(""),l.cancel()}return{mount:function(){n(e,"transitionend",function(t){t.target===e&&s&&(i(),s())})},start:function(t,n){var e=c.toPosition(t,!0),i=c.getPosition(),o=function(t){var n=u.rewindSpeed;if(r.is(Ln)&&n){var e=a.getIndex(!0),i=a.getEnd();if(0===e&&i<=t||i<=e&&0===t)return n}return u.speed}(t);1<=H(e-i)&&1<=o?u.useScroll?l.scroll(e,o,!1,n):(f("transform "+o+"ms "+u.easing),c.translate(e,!0),s=n):(c.jump(t),n())},cancel:i}}function Yn(t,n){var e;this.event=Q(),this.Components={},this.state=(e=1,{set:function(t){e=t},is:function(t){return b(v(t),e)}}),this.splides=[],this._o={},this._E={},yt(t=M(t)?gt(document,t):t,t+" is invalid."),n=d({label:F(this.root=t,$)||"",labelledby:F(t,Vt)||""},Xn,Yn.defaults,n||{});try{d(n,JSON.parse(F(t,i)))}catch(t){yt(!1,"Invalid JSON")}this._o=Object.create(d({},n))}return(t=Yn.prototype).mount=function(t,n){var e=this,i=this.state,o=this.Components;return yt(i.is([1,7]),"Already mounted!"),i.set(1),this._C=o,this._T=n||this._T||(this.is(Dn)?Bn:Hn),this._E=t||this._E,w(at({},Gn,this._E,{Transition:this._T}),function(t,n){t=t(e,o,e._o),(o[n]=t).setup&&t.setup()}),w(o,function(t){t.mount&&t.mount()}),this.emit(Y),z(this.root,"is-initialized"),i.set(3),this.emit("ready"),this},t.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},t.go=function(t){return this._C.Controller.go(t),this},t.on=function(t,n){return this.event.on(t,n),this},t.off=function(t){return this.event.off(t),this},t.emit=function(t){var n;return(n=this.event).emit.apply(n,[t].concat(o(arguments,1))),this},t.add=function(t,n){return this._C.Slides.add(t,n),this},t.remove=function(t){return this._C.Slides.remove(t),this},t.is=function(t){return this._o.type===t},t.refresh=function(){return this.emit(U),this},t.destroy=function(n){void 0===n&&(n=!0);var t=this.event,e=this.state;return e.is(1)?Q(this).on("ready",this.destroy.bind(this,n)):(w(this._C,function(t){t.destroy&&t.destroy(n)},!0),t.emit(s),t.destroy(),n&&L(this.splides),e.set(7)),this},_createClass(Yn,[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}]),(a=Yn).defaults={},a.STATES=n,a});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
